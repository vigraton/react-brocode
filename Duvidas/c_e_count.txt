Ao escrever o seguinte código:
-------------------------------------------------------------
import React, {useState, useEffect} from 'react';

function UseEffect(){

    const [count, setCount] = useState(0);

    useEffect(() => {
        document.title = `Count: ${count}`;
    }, [count]);

    function addCount(){
        setCount(c => c + 1);
    }

    function subtractCount(){
        setCount(c => c - 1);
    }

    return(<>
        <p>Count: {count}</p>
        <button onClick={addCount}>Add</button>
        <button onClick={subtractCount}>Subtract</button>
    </>)
}

export default UseEffect;
-------------------------------------------------------------

Eu tive uma dúvida...

como o JavaScript "sabe" que `c` e `count` são a mesma coisa?

Isso ocorre por cause de como o React e o useState funcionam.

1. `count` no estado:
    Quando você usa `useState`, o React cria internamente uma referência
    para o estado `count`. Essa referência é atualizada automaticamente
    sempre que você chama `setCount`.

2. `setCount` e o callback:
    Quando você passa uma função para `setCount` (como no caso de `setCount(c => c + 1)`),
    o React chama essa função com o valor atual de `count` como argumento(`c` nesse caso).

    - O React faz isso para garantir que, mesmo que múltiplas atualizações
    sejam enfileiradas ou ocorram simultaneamente, o estado atualizado seja
    sempre calculado com base no valor mais recente.
    
    - Ou seja, `c` é apenas o valor atual de `count` naquele momento em que
    a função é executada.

3. Como `count` e `c` estão relacionados:
    - `count` é valor do estado atual (que você vê no componente).

    - `c` é um snapshot (uma cópia) do valor atual de `count` que o React
    fornece à função callback dentro de `setCount`.

    Exemplo Prático:
    - Se `count` for `5`, ao clicar no botão, setCount(c => c + 1) será executado.
    Aqui, `c` recebe o valor `5`, e o retorno da função (c + 1, ou seja, 6) se
    torna o novo valor de `count`.

4. Por que usar a callback no `setCount`:
    A função de callback (c => c + 1) é importante, especialmente em cenários
    onde o estado pode ser atualizado várias vezes em sequência. Se você usasse
    diretamente `setCount(count + 1)`, poderia acabar utilizando um valor
    desatualizado de `count`.

Resumo Prático:
    O React gerencia o estado internamente, e quando você usa a função de atualização
    (setCount), ele passa automaticamente o valor mais recente do estado como argumento
    para o callback (no caso, `c`). É assim que o JavaScript "sabe" que `count` e `c` 
    estão conectados! 
